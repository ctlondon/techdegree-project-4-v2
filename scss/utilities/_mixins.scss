// sets background colors for specified map
@mixin colors($map) {
    @each $item, $color in $map {
        &#{$item}.theme__colors {
            background-color: $color;
        }
    }
}

// @mixin grid-colors($map) {
//     @each $col, $color in $map {
//         &__#{$col}.theme__colors {
//             background-color: $color;
//         }
//     }
// }

// makes buttons or rectangular blocks of color have rounded corners
@mixin roundy($dim: null, $brdr: null) {
    width: $dim;
    height: $dim;
    border: $brdr;
    border-radius: 8%;
}



// center align divs and containers
@mixin center($w) {
    width: $w;
    max-width: $max-width;
    margin-left: auto;
    margin-right: auto;
}

// make a flex container
@mixin flexy(
    $disp: flex,
    $dir: null,
    $wrap: null,
    $just: null,) {
    display: $disp;
    flex-direction: $dir;
    flex-wrap: $wrap;
    justify-content: $just;
}

// media queries

@mixin mq($break) {
    @if $break == 'md' {
        @media (min-width: map-get($breakpoints, 'md')) {
            @content;
        }
    }
}



// @mixin mq($break) {
//     // declare local variable
//     $value: map-get($breakpoints, $break);
//     // declare local variable to store the sm key in the $breakpoints map
//     $sm: map-get($breakpoints, 'sm');

//     // output media query using max-width media feature
//     //  if the argument passed for $break is the sm key
//     //  from the $breakpoints map. will return the value 
//     //  less than sm
//     @if $value < $sm {
//         @media (max-width: $value) {
//             @content;
//         }
//     }
//     // if the value is the sm breakpoint or larger
//     //  the mixin will output the min-width media query
//     @else {
//         @media (min-width: $value) {
//             @content;
//         }        
//     }
// }